From Research to Reality: A Hands-on Approach to Accessible App Development
A few weeks ago, I shared my research and goal to increase developer awareness on the digital accessibility gap. Today, I’m excited to share a step forward: PetalPal, an app I’ve been working on with the Google Code Next Launch program team to help users learn to care for their plants.

While building PetalPal, I put my digital accessibility research into practice by integrating accessibility features from day one. So far, we’ve focused on making the app’s text size fully customizable for all users. This scalable text size feature isn’t just for individuals with visual impairments; it’s a feature for anyone in a rush, in a dark setting, or who simply prefers a larger font.

According to my recent survey results, many developers hesitate to implement accessibility features because they are perceived as difficult and time-consuming. However, my experience with PetalPal proves otherwise. Implementing scalable text sizes was easier than I had thought, and took me about 30 minutes - 1 hour in all. This shows that making your app accessible doesn’t have to be an overwhelming or complex task. 

The Technical Approach: Making Text Flexible
To implement accessible text sizes, I added a customizable option directly into the app’s settings. The user’s selection adjusts the text size across the entire application, making the app both flexible and easy to maintain.

Here’s a breakdown of what I did:
Centralized Text Size Manager: I built a TextSizeManager class that manages all text sizes through the textSizeMultiplier property which holds the user’s chosen text size. When a user changes their preferred text size with a slider, all parts of the app are notified and updated by accessing this manager.
Settings UI: To make it easy for users to change their text size settings, I created a Slider in the SettingsView. This slider is bound to the textSizeManager.textSizeMultiplier property, allowing the user to visually adjust the text size from a range of values.
Custom Font Scaling Modifier: Rather than using SwiftUI’s built-in .font() modifier, I created my own reusable custom ScaledFontModifier. This modifier reads the textSizeManager’s current value and applies a scaled custom font. Using this modifier, I can apply dynamic text size within a single line of code and make sure that all text scales proportionally.
Persistence: The user settings are saved in 2 places: in UserDefaults for immediate use as well as to the user’s profile model using SwiftData. This allows the user’s preferred settings to be saved even if they close the app across devices.

For more technical details, check out the infographic below or my Github repo at https://github.com/dasadishree/iOS_Accessibility .

Why does this matter?
This experience was my first time integrating accessibility settings, and I learned that integrating accessibility doesn’t have to be a complex task, but an opportunity for better design and bonus features. This small, efficient change significantly improves the user experience for everyone and demonstrates a commitment to inclusive design.

I am continuing to use developer feedback to guide this project. If you haven’t already, please take a few minutes to fill out my survey, which will help me decide what accessibility features to focus on next and how to continue growing awareness amongst developers.
https://docs.google.com/forms/d/e/1FAIpQLSdKVC6niRRS2TSfw6RS1At_svwnILZF_N8dwNelQbxxfjTo6A/viewform?usp=sharing&ouid=105241589716510376656

#iOSDev #Accessibility #SwiftUI #Swift #InclusiveDesign #Developers #MobileDevelopment #DeveloperRelations #TechForGood
